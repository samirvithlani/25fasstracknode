
console.log("app file")
const users = require("./users") //userName --> {userName,userAge}
console.log("users...",users)
const employee = require("./employees") //employee ==getEmployeeData ---> {getEmployeeData,print....}
console.log(employee) // protocol


// var ans = employee(100,20) //function calling...
// console.log("ans = ",ans)


var ans = employee.getEmployeeData("ram",'sharma')
console.log("ans - ",ans)

employee.printEmployeeData() // print function......



server : req ----> manage --> response-----> web server | appliction server
TOMCAT server:

u can use and create web server:
http : native module [node]
express js: server

npm install express

dev tool : nodemon --> package.json
//system

npm install nodemon -g

NPM : node package manager:
node_modules : npm -->node_module -->build files [project] -->js | ts ->function

JDK --> JVM --> jar --> packages --> classes --> methods
node -->npm -->build --> packages --> .js | ts  ->functions




//first api...
//GET POST PUT DELETE
//url: 
//http://localhost:3000/test
//()=>{}
app.get("/test",(req,res)=>{

    console.log("test api called..........")
    res.send("Test API CALLED")

})

const userObj = {
    id:1001,
    name:"ram",
    age:22,
    status:"Avtive"
}

//http://localhost:3000/user
app.get("/user",(req,res)=>{
    res.json(userObj)
})

var userList = [
    {
        id:1001,
        name:"ram",
        age:22,
        status:"Avtive"
    },
    {
        id:1002,
        name:"ram",
        age:22,
        status:"Avtive"
    },
    {
        id:1003,
        name:"ram",
        age:22,
        status:"Avtive"
    },
    {
        id:1004,
        name:"ram",
        age:22,
        status:"Avtive"
    }

]

app.get("/users",(req,res)=>{

    res.json(userList)
})


server -->app.js --> rquest -->routes -->controller
users
userController
userROutes

app.js -->userRoutes --->userConteoller function


req ->data...
req.body : POST PUT
req.params : all....
req.query:  ""
req.header:  ""


create employee controller and routes
implment same apis
change: find all employees salary>req.params.salary

MONGODB: node js ORM package: mongoose

apis
GET  -->backend --> data --send --frontend

POST -->frontend data get -- POST

PUT
DELETE


GENRIC:
HTTP STATUS:
404
messgae:"user added"
backend --> frontend


User ->role...

role
roleid name
user
create table user ...roleid int, foreign key roleid references role(roleid)


department model:
employee model:

user ->3 field expect ---> 2 validation failed...
request validation..

exam -hall ticket--->

File uploading....

server : deploy --> local folder : buy bit costly :1000 rs
db     : formate --> space                        : 10000 rs
cloud  : google drive,aws s3,dropbox,onedrive,cloudinary,azure blob storage

multer package file upload...

frontend 

2 type of data:
1) form filed   file field






